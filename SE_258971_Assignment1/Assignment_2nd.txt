using System.Text;

namespace SE_258971_Assignment1
{
    public partial class Form1 : Form
    {
        private List<Sensor> sensors = new List<Sensor>();
        private int numAnalogSensors = 9;
        private int numDigitalSensors = 4;
        private int sampleInterval = 4; // in seconds
        private int nextSampleTime = 0;
        private bool continuousSampling = false;
        private int sampleIndex = 0;
        private int movingAverageFilterWindow = 3;
        private int loggingCounter = 1;
        private string fileName = "logfile.csv";
        private DateTime nextLoggingTime;

        public Form1()
        {
            InitializeComponent();

            // Initialize the sensor objects
            for (int i = 0; i < numAnalogSensors + numDigitalSensors; i++)
            {
                sensors.Add(new Sensor(i));
            }
        }

        private void buttonSampling_Click(object sender, EventArgs e)
        {
            // Check if it's time to sample
            if (nextSampleTime <= Environment.TickCount / 1000)
            {
                // Read all the sensor values
                double[] sensorValues = new double[numAnalogSensors + numDigitalSensors];
                for (int i = 0; i < numAnalogSensors + numDigitalSensors; i++)
                {
                    sensorValues[i] = sensors[i].GetValue();
                }

                // Apply the moving average filter
                double[] filteredSensorValues = new double[numAnalogSensors + numDigitalSensors];
                for (int i = 0; i < numAnalogSensors + numDigitalSensors; i++)
                {
                    int startIndex = Math.Max(0, sampleIndex - movingAverageFilterWindow);
                    int endIndex = sampleIndex;
                    double sum = 0;
                    for (int j = startIndex; j <= endIndex; j++)
                    {
                        sum += sensorValues[j];
                    }
                    filteredSensorValues[i] = sum / (endIndex - startIndex + 1);
                }

                // Display the sensor values in the text box
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < numAnalogSensors + numDigitalSensors; i++)
                {
                    sb.AppendFormat("Sensor {0}: {1:0.0000}\t", i, filteredSensorValues[i]);
                }
                textBoxShow.Text = sb.ToString();
                textBoxShow.Update();

                // Update the next sample time
                if (continuousSampling)
                {
                    nextSampleTime = Environment.TickCount / 1000 + sampleInterval;
                }
                else
                {
                    nextSampleTime = int.MaxValue;
                }

                sampleIndex++;
            }
            else
            {
                MessageBox.Show("It's not time to sample yet. Please wait for the next sampling time.");
            }
        }

        private void buttonLogging_Click(object sender, EventArgs e)
        {
            if (DateTime.Now < nextLoggingTime)
            {
                MessageBox.Show("Please wait until the next logging time.",
                                "Logging Information", System.Windows.Forms.MessageBoxButtons.OK);
                return;
            }

            // Read all the sensor values
            List<double> sensorValues = new List<double>();
            for (int i = 0; i < 13; i++)
            {
                Sensor sensor = new Sensor(i);
                sensorValues.Add(sensor.GetValue());
            }

            // Write sensor values to a text file in CSV format
            using (StreamWriter sw = File.AppendText(fileName))
            {
                sw.WriteLine("Time, Sensor Value");
                for (int i = 0; i < sensorValues.Count; i++)
                {
                    sw.WriteLine(DateTime.Now.ToString() + ", " + sensorValues[i].ToString());
                }
            }

            textBoxLogging.Text = "File name: " + fileName + "\nNumber of Writings: " + loggingCounter++;
            nextLoggingTime = DateTime.Now.AddSeconds(42);
        }

        DateTime nextSamplingTime;

        private void textBoxSampling_TextChanged(object sender, EventArgs e)
        {
            int interval = 0;
            if (Int32.TryParse(textBoxSampling.Text, out interval))
            {
                if (interval >= 4)
                {
                    nextSamplingTime = DateTime.Now.AddSeconds(interval);
                    textBoxNextSamplingTime.Text = nextSamplingTime.ToString();
                }
                else
                {
                    MessageBox.Show("Sampling interval must be at least 4 seconds", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show("Invalid input, please enter an integer value", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }



        private void textBoxLogging_TextChanged(object sender, EventArgs e)
{
    int interval = 00;
    if (Int32.TryParse(textBoxLogging.Text, out interval))
    {
        if (interval >= 42)
        {
            nextLoggingTime = DateTime.Now.AddSeconds(interval);
            textBoxNextLoggingTime.Text = nextLoggingTime.ToString();
        }
        else
        {
            MessageBox.Show("Logging interval must be at least 42 seconds", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
    else
    {
        MessageBox.Show("Invalid input, please enter an integer value", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
}


        private void textBoxShow_TextChanged(object sender, EventArgs e)
        {

        }

        private void labelSampling_Click(object sender, EventArgs e)
        {

        }

        private void labelLogging_Click(object sender, EventArgs e)
        {

        }

        private void groupBoxSampling_Enter(object sender, EventArgs e)
        {

        }

        private void groupBoxLogging_Enter(object sender, EventArgs e)
        {

        }

        private void groupBoxShow_Enter(object sender, EventArgs e)
        {

        }

        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Please input text in all input fields (use your own text here!!!).",
                               "Input Information", System.Windows.Forms.MessageBoxButtons.OK);

        }

        private void textBoxNextSamplingTime_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBoxNextLoggingTime_TextChanged(object sender, EventArgs e)
        {

        }
    }
}